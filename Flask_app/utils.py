def rag_chat(client, chat_session_id, main_prompt, system_prompt):
    """
    Perform a chat session using the H2O.ai RAG (Retrieval-Augmented Generation) API.
    Includes a while loop with a timeout to handle cold start issues.

    Args:
        client (h2ogpte.H2OGPTE object): The client object used to connect to the chat session.
        chat_session_id (str): The ID of the chat session.
        main_prompt (str): The main prompt for the LLM.
        system_prompt (str): The system prompt for the LLM.

    Returns:
        h2ogpte.types.ChatMessage Object: The response generated by the RAG model.

    """
    counter = 1
    while True:
        print(f"Currently at count = {counter}")
        try:
            with client.connect(chat_session_id) as session:
                answer = session.query(
                    message=main_prompt,
                    system_prompt=system_prompt,
                    rag_config={
                    "rag_type": "rag", # https://h2oai.github.io/h2ogpte/getting_started.html#advanced-controls-for-document-q-a
                    },
                    llm="h2oai/h2ogpt-4096-llama2-70b-chat",
                    timeout=1 if counter < 3 else 120,
                )
                return answer
        except TimeoutError:
            counter += 1
            continue


def extract_json_string(full_string): 
    """Extracts json string from a json-like string from LLM response.

    Args:
        full_string (str): The full string containing the json-like string.

    Returns:
        str or None: The extracted json-like string if found, otherwise None.
    """

    start_index = full_string.find('{')  # Find the index of the first '{'
    end_index = full_string.rfind('}')   # Find the index of the last '}'
    
    if start_index != -1 and end_index != -1:
        return full_string[start_index:end_index + 1]
    else:
        return None
